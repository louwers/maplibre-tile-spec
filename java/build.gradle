plugins {
    id('com.diffplug.spotless') version '6.25.0' apply false
    id 'me.champeau.jmh' version '0.7.2' apply false
    id 'com.vanniktech.maven.publish' version '0.34.0' apply false
}

allprojects {
    group = 'org.maplibre'
    version = project.findProperty('version') ?: 'unspecified'

    repositories {
        mavenCentral()
        maven {
            url 'https://maven.ecc.no/releases'
        }
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'jacoco'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            outputs.upToDateWhen { false }
            showStandardStreams = true
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test
    }

    spotless {
        java {
            importOrder()
            target 'src/*/java/**/*.java'
            googleJavaFormat()
            removeUnusedImports()
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile).tap {
            configureEach {
                options.compilerArgs << "-Xlint:unchecked"
                options.compilerArgs << "-Xlint:deprecation"
                options.compilerArgs << "-Xlint:all"
            }
        }
    }

    tasks.withType(JavaCompile).configureEach {
    }

    tasks.withType(JavaExec).configureEach {
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
    }
}

// Root project tasks
tasks.register('validateSemver') {
    doLast {
        def version = project.version
        if (version == null || version == 'unspecified') {
            throw new GradleException("Version is not set. Please provide a version using -Pversion=<version>")
        }

        def semverPattern = /^\d+\.\d+\.\d+$/

        if (!version.matches(semverPattern)) {
            throw new GradleException("Version '$version' is not a valid semantic version. Expected format: major.minor.patch (e.g., 1.0.0, 2.1.3)")
        }

        println "âœ“ Version '$version' is valid semver"
    }
}

// Aggregate tasks
tasks.register('cli') {
    dependsOn ':mlt-cli:encode'
    dependsOn ':mlt-cli:decode'
    dependsOn ':mlt-cli:meta'
}

tasks.register('buildAll') {
    dependsOn 'cli'
    dependsOn ':mlt-core:assemble'
    dependsOn ':mlt-cli:assemble'
}
