dependencies {
    implementation project(':mlt-core')
    implementation 'commons-cli:commons-cli:1.10.0'
    implementation 'org.apache.commons:commons-compress:1.28.0'
    implementation 'org.imintel:mbtiles4j:1.0.6'
    implementation 'org.xerial:sqlite-jdbc:3.50.3.0'
    implementation 'com.google.code.gson:gson:2.13.2'
    implementation 'com.google.protobuf:protobuf-java:4.32.1'
    implementation 'org.locationtech.jts:jts-core:1.20.0'
    implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'
    implementation 'org.jetbrains:annotations:15.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.4'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.3'
}

["encode", "decode", "meta"].each { name ->
    task "$name"(type: Jar, dependsOn: compileJava) {
        archiveFileName = name + ".jar"
        archiveClassifier = "cli"
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        from {
            configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }
        manifest.from jar.manifest
        with jar
    }
}

encode.manifest.attributes 'Implementation-Title': 'encode an mlt from an mvt',
        'Main-Class': 'org.maplibre.mlt.cli.Encode'
decode.manifest.attributes 'Implementation-Title': 'decode an mlt',
        'Main-Class': 'org.maplibre.mlt.cli.Decode'
meta.manifest.attributes 'Implementation-Title': 'generate a mltmetadata.pbf file from an mvt',
        'Main-Class': 'org.maplibre.mlt.cli.Meta'
